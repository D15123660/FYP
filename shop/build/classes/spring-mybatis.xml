<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
     xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context.xsd  
				        http://www.springframework.org/schema/tx
				        http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- Configure annotation scan range-->
	<context:component-scan base-package="com.service" />

	<!-- Reference database configuration file -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- Configure data source-use tomcat connection pool -->
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" /><!-- Database driven -->
		<property name="url" value="${jdbc.url}" /> <!-- Connect URL -->
		<property name="username" value="${jdbc.username}" /> <!-- database username -->
		<property name="password" value="${jdbc.password}" /> <!-- Database password -->
		<!-- Connection pool parameter configuration-->
		<property name="initialSize" value="1" /><!-- The initial number of connections created when the connector starts. The default is 10 -->
		<property name="maxActive" value="5" /><!-- The maximum number of active connections that can be allocated at the same time. The default is 100 -->
		<property name="minIdle" value="1" /><!-- The minimum number of idle connections. The default is initialSize: 10 -->
		<property name="maxIdle" value="5" /><!-- The maximum number of idle connections. The default is maxActive: 100 -->
		<property name="testOnBorrow" value="true" /><!-- Whether to verify objects before lending them from the pool. The default value is false. If the object fails verification, it is removed from the pool, and then the next one is borrowed. Note: In order for the true value to take effect, the validationQuery parameter must be a non-empty string. In order to achieve more efficient verification, validationInterval can be used -->
		<property name="validationQuery" value="select 1" /><!-- The SQL query used to verify the connections in the pool before returning them to the caller. If you specify this value, the query does not need to return any data, but does not throw a SQLException. Default is null -->
		<property name="validationInterval" value="30000" /><!-- The frequency and time value (in seconds) set to avoid over-verification. Run verification at this frequency at most. If the connection should be verified, but it cannot be verified within this interval, it will be verified again. The default is 30000 (30 seconds) -->
	</bean>

	<!-- Configure MyBatis SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" /> 
		<property name="mapperLocations" value="classpath:com/mapper/*.xml" /><!-- Compatible with xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/><!-- Configure mybatis global configuration file --> 
	</bean>
	<!-- Configure Dao's package Mybatis will dynamically create the implementation class -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.dao" /><!-- Compatible annotation method -->
	</bean>

	<!-- Configure transaction manager -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>	
	<!-- Use annotations to define transactions -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

</beans>